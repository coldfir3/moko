% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optim_pego.R
\name{MEGO}
\alias{MEGO}
\title{MEGO: Multi-Objective Efficient Global Optimization Algorithm}
\usage{
MEGO(model, fun, nsteps, lower = rep(0, model@d), upper = rep(1, model@d),
  quiet = TRUE, control = NULL, optimcontrol = list(max.time = 2))
}
\description{
Executes \code{nsteps} iterations of the MEGO method to an object of class
\link{\code{mkm}}. At each step, a weighted kriging model is re-estimated (including
covariance parameters re-estimation) based on the initial design points plus
the points visited during all previous iterations; then a new point is
obtained by maximizing the Expected Improvement criterion (EI).
}
\examples{
# ----------------
# Fonseca and Flemming
# ----------------
n <- 20
d <- 2
m <- 2
A <- 1 #verificar pq 4 nao funfa
fun <- Fonseca
doe <- 2*A*replicate(d,sample(0:n,n))/n - A
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res)
model <- MEGO(model, fun, 20, lower = -rep(A,d), upper = rep(A,d), quiet = FALSE)
tpf <- mco::nsga2(fun, d, 2, lower.bounds = -rep(A,d), upper.bounds = rep(A,d))$value
plot(tpf)
points(ps(model@response)$set, col = 'blue', pch = 19)
# ----------------
# Shaffer1
# ----------------
n <- 10
d <- 1
A <- 10
fun <- Shaffer1
doe <- 2*A*replicate(d,sample(0:n,n))/n - A
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res)
model <- MEGO(model, fun, 20, lower = -A, upper = A, quiet = FALSE)
tpf <- mco::nsga2(fun, d, 2, lower.bounds = -A, upper.bounds = A)$value
plot(tpf)
points(ps(model@response)$set, col = 'blue', pch = 19)
# ----------------
# Shaffer2
# ----------------
n <- 10
d <- 1
fun <- Shaffer2
doe <- 15 * replicate(d,sample(0:n,n))/n - 5
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res)
model <- MEGO(model, fun, 20, lower = -5, upper = 10, quiet = FALSE)
tpf <- mco::nsga2(fun, d, 2, lower.bounds = -5, upper.bounds = 10)$value
plot(tpf)
points(ps(model@response)$set, col = 'blue', pch = 19)
# ----------------
# Viennet
# ----------------
n <- 20
d <- 2
fun <- Viennet
doe <- replicate(d,sample(0:n,n))/n
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res)
model <- MEGO(model, fun, 80, quiet = FALSE)
pairs(ps(model@response)$set)
rgl::plot3d(ps(model@response)$set)
# ----------------
# Binh
# ----------------
n <- 20
d <- 2
fun <- Binh
doe <- cbind(rep(5,n), rep(3,n)) * replicate(d,sample(0:n,n))/n
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res, modelcontrol = list(objectives = 1:2))
model <- MEGO(model, fun, 40, upper = c(5,3), quiet = FALSE)
fun <- function(x) Binh(x)[c(1,2)]
gfun <- function(x) -Binh(x)[-c(1,2)]
tpf <- mco::nsga2(fun, d, 2, lower.bounds = c(0,0), upper.bounds = c(5,3),
                   constraints = gfun, cdim = 2)$value
plot(tpf)
points(ps(model@response[which(model@feasible),model@objective])$set, col = 'blue', pch = 19)
# ----------------
# The Nowacki Beam
# ----------------
n <- 20
d <- 2
fun <- function(x) nowacki_beam(x, box = data.frame(b = c(10, 50),h = c(50, 250)))
doe <- replicate(d,sample(0:n,n))/n
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res, modelcontrol = list(objective = 1:2, lower = rep(0.05,d)))
model <- MEGO(model, fun, 80, quiet = FALSE)
plot(model@design, col=ifelse(model@feasible,'blue','red'))
fun <- function(x) nowacki_beam(x, box = data.frame(b = c(10, 50),h = c(50, 250)))[c(1,2)]
gfun <- function(x) -nowacki_beam(x, box = data.frame(b = c(10, 50),h = c(50, 250)))[-c(1,2)]
tpf <- mco::nsga2(fun, d, 2, lower.bounds = c(0,0), upper.bounds = c(1,1),
                  constraints = gfun, cdim = 4)$value
plot(tpf)
points(ps(model@response[which(model@feasible),model@objective])$set, col = 'blue', pch = 19)

# ----------------
# The Nowacki Beam (1D DEMO)
# ----------------
n <- 20
d <- 2
fun <- function(x) nowacki_beam(x)[c(1,3,6)]
doe <- replicate(d,sample(0:n,n))/n
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res, modelcontrol = list(objective = 1, lower = rep(0.1,d)))
model <- MEGO(model, fun, 20, quiet = FALSE, control = list(rho = 0.1))
plot(model@design, col=ifelse(model@feasible,'blue','red'))

#### SOME single objective optimization

# -----------------------------------
# Branin-Hoo function (unconstrained)
# -----------------------------------
n <- 20
d <- 2
doe <- replicate(d,sample(0:n,n))/n
fun <- DiceKriging::branin
res <- apply(doe, 1, fun)
model <- mkm(doe, res, modelcontrol = list(lower=rep(0.1,d)))
model <- MEGO(model, fun, 20, quiet = FALSE)
plot(model@design, col=ifelse(model@feasible,'blue','red'))
# ---------------------------------------
# Branin-Hoo function (simple constraint)
# ---------------------------------------
n <- 10
d <- 2
doe <- replicate(d,sample(0:n,n))/n
fun_cost <- DiceKriging::branin
fun_cntr <- function(x) 0.2 - prod(x)
fun <- function(x) return(c(fun_cost(x),fun_cntr(x)))
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res, modelcontrol = list(objective = 1, lower=rep(0.1,d)))
model <- MEGO(model, fun, 10, quiet = FALSE)
plot(model@design, col=ifelse(model@feasible,'blue','red'))
# ---------------------------------------
# Branin-Hoo function (narrow constraint)
# ---------------------------------------
n <- 10
d <- 2
doe <- replicate(d,sample(0:n,n))/n
fun_cost <- DiceKriging::branin
fun_cntr <- function(x){
 g1 <- 0.9 - sum(x)
 g2 <- sum(x) - 1.1
 g3 <- - x[1] + 0.5
 g4 <- x[2] - 0.5
 return(c(g1,g2,g3,g4))
}
fun <- function(x) return(c(fun_cost(x),fun_cntr(x)))
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res, modelcontrol = list(objective = 1, lower=rep(0.1,d)))
model <- MEGO(model, fun, 10, quiet = FALSE)
plot(model@design, col=ifelse(model@feasible,'blue','red'))
# ---------------------------------------------
# Branin-Hoo function (discontinuos constraint)
# ---------------------------------------------
n <- 20
d <- 2
doe <- replicate(d,sample(0:n,n))/n
Griewank <-  function(x) {
 ii <- c(1:length(x))
  sum <- sum(x^2/4000)
  prod <- prod(cos(x/sqrt(ii)))
  y <- sum - prod + 1
  return(y)
}
fun_cost <- DiceKriging::branin
fun_cntr <- function(x) 1.6 - Griewank(x*10-5)
fun <- function(x) return(c(fun_cost(x),fun_cntr(x)))
res <- t(apply(doe, 1, fun))
model <- mkm(doe, res, modelcontrol = list(objective = 1, lower=c(0.1,0.1)))
model <- MEGO(model, fun, 20, quiet = FALSE)
plot(model@design, col=ifelse(model@feasible,'blue','red'))
}

